chart:
  name: atlantis
  path: releases/apps/iac/atlantis/non-prod
  url: git@github.com:polarpoint-io/argocd-tooling-applications.git
  targetRevision: main
  recurseDirectory: false
  namespace: infra

labels:
  service: tooling


syncPolicy:
  prune: false
  selfHeal: false

values: |
  ## -------------------------- ##
  # Values to override for your instance.
  ## -------------------------- ##

  ## An option to override the atlantis url,
  ##   if not using an ingress, set it to the external IP.
  atlantisUrl: https://infra.polarpoint.io

  # Replace this with your own repo allowlist:
  orgAllowlist: github.com/polarpoint-io/*
  logLevel: "debug"

  # If using GitHub, specify like the following:
  github:
    user: bainss



  # When referencing Terraform modules in private repositories, it may be helpful
  # (necessary?) to use redirection in a .gitconfig like so:
  # gitconfig: |
    # [url "https://YOUR_GH_TOKEN@github.com"]
    #   insteadOf = https://github.com
    # [url "https://YOUR_GH_TOKEN@github.com"]
    #   insteadOf = ssh://git@github.com
    # [url "https://oauth2:YOUR_GITLAB_TOKEN@gitlab.com"]
    #   insteadOf = https://gitlab.com
    # [url "https://oauth2:YOUR_GITLAB_TOKEN@gitlab.com"]
    #   insteadOf = ssh://git@gitlab.com
  # Source: https://stackoverflow.com/questions/42148841/github-clone-with-oauth-access-token

  # If managing secrets outside the chart for the gitconfig, use this variable to reference the secret name
  gitconfigSecretName: git-config-atlantis
  vcsSecretName: git-webhook-atlantis

  image:
    repository: ghcr.io/runatlantis/atlantis
    tag: v0.19.9
    pullPolicy: IfNotPresent

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # imagePullSecrets:
  # - myRegistryKeySecretName

  ## Use Server Side Repo Config,
  ## ref: https://www.runatlantis.io/docs/server-side-repo-config.html
  ## Example default configuration
  repoConfig: |
    ---
    repos:
    - id: /.*/
      apply_requirements: []
      workflow: default
      allowed_overrides: []
      allow_custom_workflows: false
    workflows:
      default:
        plan:
          steps: [init, plan]
        apply:
          steps: [apply]

  # allowForkPRs enables atlantis to run on a fork Pull Requests
  allowForkPRs: false

  # allowDraftPRs enables atlantis to run on a draft Pull Requests
  allowDraftPRs: false

  # hidePrevPlanComments enables atlantis to hide previous plan comments
  hidePrevPlanComments: false

  ## defaultTFVersion set the default terraform version to be used in atlantis server
  defaultTFVersion: 1.3.2

  # disableApply disables running `atlantis apply` regardless of which flags are sent with it
  disableApply: false

  # disableApplyAll disables running `atlantis apply` without any flags
  disableApplyAll: false

  # disableRepoLocking stops atlantis locking projects and or workspaces when running terraform
  disableRepoLocking: false

  # Use Diff Markdown Format for color coding diffs
  enableDiffMarkdownFormat: true

  # Optionally specify an username and a password for basic authentication
  # basicAuth:
  #   username: "atlantis"
  #   password: "atlantis"

  # Optionally specify an API secret to enable the API
  # api:
  #   secret: "s3cr3t"

  # If managing secrets outside the chart for the API secret, use this variable to reference the secret name
  # apiSecretName: "myapisecret"

  # Common Labels for all resources created by this chart.
  commonLabels: {}

  # We only need to check every 60s since Atlantis is not a high-throughput service.
  livenessProbe:
    enabled: true
    periodSeconds: 60
    initialDelaySeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    scheme: HTTP
  readinessProbe:
    enabled: true
    periodSeconds: 60
    initialDelaySeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
    scheme: HTTP

  service:
    type: NodePort
    port: 80
    targetPort: 4141
    loadBalancerIP: null

  podTemplate:
    annotations: {}
      # kube2iam example:
      # iam.amazonaws.com/role: role-arn
    labels: {}

  # It is not recommended to run atlantis as root
  statefulSet:
    annotations: {}
    labels: {}
    securityContext:
      fsGroup: 1000
      runAsUser: 100
      fsGroupChangePolicy: "OnRootMismatch"
    priorityClassName: ""

  ## Optionally customize the terminationGracePeriodSeconds
  # terminationGracePeriodSeconds: 60

  ingress:
    enabled: false
    ingressClassName:
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /*
  ## this is in case we want several paths under the same host, with different backend services
  #  paths:
  #    - path: "/path1"
  #      service: test1
  #      port:
  #    - path: "/path2"
  #      service: test2
  #      port:
    pathType: ImplementationSpecific
    host:

  ## in case we need several hosts:
    hosts:
      - host: chart-example.local
        paths: ["/"]
  #      service: chart-example1
      - host: chart-example.local2
  #      service: chart-example1
        paths: ["/lala"]
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
    labels: {}

  ## Allow to override the /etc/ssl/certs/ca-certificates.cer with your custom one
  # You have to create a secret `my-ca-certificates`
  # customPem: my-ca-certificates

  resources:
    requests:
      memory: 1Gi
      cpu: 100m
    limits:
      memory: 1Gi
      cpu: 100m

  ## Embedded data volume & volumeMount (default working)
  volumeClaim:
    enabled: true
    ## Disk space for to check out repositories
    dataStorage: 5Gi
    ## Storage class name (if possible, use a resizable one)
    # storageClassName: value

  ## To keep backwards compatibility
  ## DEPRECATED - Disk space for Atlantis to check out repositories
  # dataStorage: 5Gi
  ## DEPRECATED - Storage class name for Atlantis disk
  # storageClassName: value

  replicaCount: 1

  ## test container details
  test:
    enabled: false
    image: lachlanevenson/k8s-kubectl
    imageTag: v1.4.8-bash

  nodeSelector: {}

  tolerations: []

  affinity: {}

  serviceAccount:
    # Specifies whether a ServiceAccount should be created
    create: true
    # Set the `automountServiceAccountToken` field on the pod template spec
    # If false, no kubernetes service account token will be mounted to the pod
    mount: true
    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name:
    # Annotations for the Service Account
    # Example:
    #
    # annotations:
    #   annotation1: value
    #   annotation2: value
    annotations: {}

  # tlsSecretName: tls

  # Optionally specify additional environment variables to be populated from Kubernetes secrets.
  # Useful for passing in TF_VAR_foo or other secret environment variables from Kubernetes secrets.
  environmentSecrets: []
  # environmentSecrets:
  #   - name: THE_ENV_VAR
  #     secretKeyRef:
  #       name: the_k8s_secret_name
  #       key: the_key_of_the_value_in_the_secret

  # Optionally specify additional environment variables in raw yaml format
  # Useful to specify variables refering to k8s objects
  # environmentRaw:
  #   - name: POD_IP
  #     valueFrom:
  #       fieldRef:
  #         fieldPath: status.podIP
  environmentRaw: []

  # Optionally specify additional Kubernetes secrets to load environment variables from.
  # All key-value pairs within these secrets will be set as environment variables.
  # Note that any variables set here will be ignored if also defined in the env block of the atlantis statefulset.
  # For example, providing ATLANTIS_GH_USER here and defining a value for github.user will result in the github.user value being used.
  loadEnvFromSecrets:
    - atlantis-environment-secrets

  # Optionally specify additional Kubernetes ConfigMaps to load environment variables from.
  # All key-value pairs within these ConfigMaps will be set as environment variables.
  # Note that any variables set here will be ignored if also defined in the env block of the atlantis statefulset.
  # For example, providing ATLANTIS_ALLOW_FORK_PRS here and defining a value for allowForkPRs will result in the allowForkPRs value being used.
  loadEnvFromConfigMaps: []
  # loadEnvFromConfigMaps:
  #   - config_one
  #   - config_two

  # Optionally specify google service account credentials as Kubernetes secrets. If you are using the terraform google provider you can specify the credentials as "${file("/var/secrets/some-secret-name/key.json")}".
  googleServiceAccountSecrets: []
  # googleServiceAccountSecrets:
  #   - name: some-secret-name
  #     secretName: the_k8s_secret_name

  # Optionally specify additional volumes for the pod.
  extraVolumes:
    - name: gitconfig
      configMap:
        name: atlantis-non-prod-git-cm
        defaultMode: 0777
        items:
        - key: config.sh
          path: config.sh

  # Optionally specify additional volume mounts for the container.
  extraVolumeMounts:
    - name: gitconfig
      mountPath: /opt/gitconfig


  extraManifests:
   - apiVersion: v1
     kind: ConfigMap
     metadata:
       name: "{{ .Release.Name }}-git-cm"
     data:
       config.sh: |-
         #!/bin/sh
         echo " Setting git ssh keys";
         ATLANTIS_HOME=/home/atlantis
           if [ ! -d "$ATLANTIS_HOME/.ssh" ]; then
             mkdir "$ATLANTIS_HOME/.ssh"
           fi
           echo " Setting ssh dir";
           if [ ! -f "$ATLANTIS_HOME/.ssh/id_rsa" ]; then
             echo "$GITHUB_USER_SSH_KEY" > "$ATLANTIS_HOME/.ssh/id_rsa"
             echo " Setting permissions";
             chmod 600 "$ATLANTIS_HOME/.ssh/id_rsa"
             chown atlantis:atlantis "$ATLANTIS_HOME/.ssh/id_rsa"
           fi

  initContainers: []



  # hostAliases:
  #   - hostnames:
  #     - aaa.com
  #     - test.ccc.com
  #     ip: 10.0.0.0
  #   - hostnames:
  #     - bbb.com
  #     ip: 10.0.0.2

  extraArgs: []
  # extraArgs:
  # - --disable-autoplan
  # - --disable-repo-locking

  extraContainers: []
  # extraContainers:
  #  - name: <container name>
  #    args:
  #      - ...
  #    image: <docker images>
  #    imagePullPolicy: IfNotPresent
  #    resources:
  #      limits:
  #        memory: 128Mi
  #      requests:
  #        cpu: 100m
  #        memory: 128Mi
  #    volumeMounts:
  #      - ...

  containerSecurityContext: {}
  # containerSecurityContext:
  #   allowPrivilegeEscalation: false
  #   readOnlyRootFilesystem: true

  servicemonitor:
    enabled: false

  # Enable this if you're using Google Managed Prometheus
  podMonitor:
    enabled: false
    interval: "30s"
