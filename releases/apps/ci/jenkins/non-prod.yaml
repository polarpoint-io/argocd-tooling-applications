chart:
  name: jenkins
  url: https://charts.jenkins.io
  targetRevision: 4.1.17
  namespace: ci
  
labels:
  service: tooling


values: |
  # Default values for jenkins.
  # This is a YAML-formatted file.
  # Declare name/value pairs to be passed into your templates.
  # name: value

  ## Overrides for generated resource names
  # See templates/_helpers.tpl
  # nameOverride:
  # fullnameOverride:
  # namespaceOverride:

  # For FQDN resolving of the master service. Change this value to match your existing configuration.
  # ref: https://github.com/kubernetes/dns/blob/master/docs/specification.md
  clusterZone: "cluster.local"

  controller:
    # Used for label app.kubernetes.io/component
    componentName: "jenkins-controller"
    image: "jenkins/jenkins"
    tagLabel: jdk11
    imagePullPolicy: "Always"
    imagePullSecretName:
    # Optionally configure lifetime for master-container
    lifecycle:
    #  postStart:
    #    exec:
    #      command:
    #      - "uname"
    #      - "-a"
    disableRememberMe: false
    numExecutors: 8
    # configures the executor mode of the Jenkins node. Possible values are: NORMAL or EXCLUSIVE
    executorMode: "NORMAL"
    # This is ignored if enableRawHtmlMarkupFormatter is true
    markupFormatter: plainText
    customJenkinsLabels: []
    # configAutoReload requires UseSecurity is set to true:
    adminSecret: true
    #useSecurity: true

    # enables configuration done directly via XML files
    enableXmlConfig: false
    # Allows to configure different SecurityRealm using Jenkins XML
    #securityRealm: |-
      #<securityRealm class="hudson.security.LegacySecurityRealm"/>
    # Allows to configure different AuthorizationStrategy using Jenkins XML
    #authorizationStrategy: |-
    #  <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
    #    <denyAnonymousReadAccess>true</denyAnonymousReadAccess>
    #  </authorizationStrategy>
    hostNetworking: false
    # When enabling LDAP or another non-Jenkins identity source, the built-in admin account will no longer exist.
    # If you disable the non-Jenkins identity store and instead use the Jenkins internal one,
    # you should revert master.adminUser to your preferred admin user:
    adminUser: "admin"
    # adminPassword: <defaults to random>
    admin:
      existingSecret: ""
      userKey: jenkins-admin-user
      passwordKey: jenkins-admin-password
    # This values should not be changed unless you use your custom image of jenkins or any devired from. If you want to use
    # Cloudbees Jenkins Distribution docker, you should set jenkinsHome: "/var/cloudbees-jenkins-distribution"
    jenkinsHome: "/var/jenkins_home"
    # This values should not be changed unless you use your custom image of jenkins or any devired from. If you want to use
    # Cloudbees Jenkins Distribution docker, you should set jenkinsRef: "/usr/share/cloudbees-jenkins-distribution/ref"
    jenkinsRef: "/usr/share/jenkins/ref"
    #jenkinsWar: "/usr/share/jenkins/jenkins.war"
    rollingUpdate: {}
    # Ignored if Persistence is enabled
    # maxSurge: 1
    # maxUnavailable: 25%
    resources:
      requests:
        cpu: "50m"
        memory: "256Mi"
      limits:
        cpu: "2000m"
        memory: "4096Mi"
    # Environment variables that get added to the init container (useful for e.g. http_proxy)
    # initContainerEnv:
    #   - name: http_proxy
    #     value: "http://192.168.64.1:3128"
    containerEnv:
      - name: CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            name: jenkins-clientsecret
            key: password
    #   - name: http_proxy
    #     value: "http://192.168.64.1:3128"
    # Set min/max heap here if needed with:
    # javaOpts: "-Xms512m -Xmx512m"
    # jenkinsOpts: ""
    jenkinsUrl: "https://build.polarpoint.io"
    # If you set this prefix and use ingress controller then you might want to set the ingress path below
    # jenkinsUriPrefix: "/jenkins"
    # Enable pod security context (must be `true` if runAsUser or fsGroup are set)
    usePodSecurityContext: true
    # Set runAsUser to 1000 to let Jenkins run as non-root user 'jenkins' which exists in 'jenkins/jenkins' docker image.
    # When setting runAsUser to a different value than 0 also set fsGroup to the same value:
    runAsUser: 1000
    fsGroup: 1000
    # If you have PodSecurityPolicies that require dropping of capabilities as suggested by CIS K8s benchmark, put them here
    securityContextCapabilities: {}
    #  drop:
    #    - NET_RAW
    servicePort: 8080
    targetPort: 8080
    # For minikube, set this to NodePort, elsewhere use LoadBalancer
    # Use ClusterIP if your setup includes ingress controller
    serviceType: NodePort
    # serviceExternalTrafficPolicy:
    # Jenkins controller service annotations
    serviceAnnotations: {}
    # Jenkins master custom labels
    # statefulSetLabels: {}
    # #   foo: bar
    # #   bar: foo
    deploymentLabels: {}
    #   foo: bar
    #   bar: foo
    # Jenkins master service labels
    serviceLabels: {}
    #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
    # Put labels on Jenkins master pod
    podLabels: {}
    # Used to create Ingress record (should used with ServiceType: ClusterIP)
    # nodePort: <to set explicitly, choose port between 30000-32767
    # Enable Kubernetes Liveness and Readiness Probes
    # ~ 2 minutes to allow Jenkins to restart when upgrading plugins. Set ReadinessTimeout to be shorter than LivenessTimeout.
    # Used to create Ingress record (should used with ServiceType: ClusterIP)
    # nodePort: <to set explicitly, choose port between 30000-32767
    # Enable Kubernetes Liveness and Readiness Probes
    # if Startup Probe is supported, enable it too
    # ~ 2 minutes to allow Jenkins to restart when upgrading plugins. Set ReadinessTimeout to be shorter than LivenessTimeout.
    healthProbes: true
    probes:
      startupProbe:
        httpGet:
          path: '{{ default "" .Values.controller.jenkinsUriPrefix }}/login'
          port: http
        periodSeconds: 10
        timeoutSeconds: 5
        failureThreshold: 12
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: '{{ default "" .Values.controller.jenkinsUriPrefix }}/login'
          port: http
        periodSeconds: 10
        timeoutSeconds: 5
        # If Startup Probe is not supported on your Kubernetes cluster, you might want to use "initialDelaySeconds" instead.
        # It delays the initial liveness probe while Jenkins is starting
        # initialDelaySeconds: 60
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: '{{ default "" .Values.controller.jenkinsUriPrefix }}/login'
          port: http
        periodSeconds: 10
        timeoutSeconds: 5
        # If Startup Probe is not supported on your Kubernetes cluster, you might want to use "initialDelaySeconds" instead.
        # It delays the initial readyness probe while Jenkins is starting
        # initialDelaySeconds: 60
    # PodDisruptionBudget config
    podDisruptionBudget:
      enabled: false
      # For Kubernetes v1.5+, use 'policy/v1beta1'
      # For Kubernetes v1.21+, use 'policy/v1'
      apiVersion: "policy/v1beta1"
      annotations: {}
      labels: {}
    agentListenerEnabled: true
    agentListenerPort: 50000
    agentListenerHostPort:
    agentListenerNodePort:
    disabledAgentProtocols:
      - JNLP-connect
      - JNLP2-connect

    ## Old prod Liveness probe and Readiness Probe conf
    # healthProbesLivenessTimeout: 5
    # healthProbesReadinessTimeout: 5
    # healthProbeLivenessPeriodSeconds: 10
    # healthProbeReadinessPeriodSeconds: 10
    # healthProbeLivenessFailureThreshold: 5
    # healthProbeReadinessFailureThreshold: 3
    # healthProbeLivenessInitialDelay: 90
    # healthProbeReadinessInitialDelay: 60
    # slaveListenerPort: 50000
    # slaveHostPort:
    # disabledAgentProtocols:
    #   - JNLP-connect
    #   - JNLP2-connect
    csrf:
      defaultCrumbIssuer:
        enabled: true
        proxyCompatability: true
    cli: false
    # Kubernetes service type for the JNLP agent service
    # slaveListenerServiceType is the Kubernetes Service type for the JNLP agent service,
    # either 'LoadBalancer', 'NodePort', or 'ClusterIP'
    # Note if you set this to 'LoadBalancer', you *must* define annotations to secure it. By default
    # this will be an external load balancer and allowing inbound 0.0.0.0/0, a HUGE
    # security risk:  https://github.com/kubernetes/charts/issues/1341
    agentListenerServiceType: "ClusterIP"
    # Optionally assign an IP to the LoadBalancer slaveListenerService LoadBalancer
    # GKE users: only regional static IPs will work for Service Load balancer.
    # slaveListenerLoadBalancerIP: 1.2.3.4
    agentListenerLoadBalancerIP:
    agentListenerServiceAnnotations: {}

    # slaveListenerServiceAnnotations: {}
    # slaveDefaultsProviderTemplate: ""
    # slaveConnectTimeout: 5
    # slaveReadTimeout: 15
    # slaveKubernetesNamespace:
    # slaveJenkinsUrl:
    # slaveJenkinsTunnel:

    # Example of 'LoadBalancer' type of agent listener with annotations securing it
    # slaveListenerServiceType: LoadBalancer
    # slaveListenerServiceAnnotations:
    #   service.beta.kubernetes.io/aws-load-balancer-internal: "True"
    #   service.beta.kubernetes.io/load-balancer-source-ranges: "172.0.0.0/8, 10.0.0.0/8"

    # LoadBalancerSourcesRange is a list of allowed CIDR values, which are combined with ServicePort to
    # set allowed inbound rules on the security group assigned to the master load balancer
    loadBalancerSourceRanges:
    - 0.0.0.0/0
    # Optionally assign a known public LB IP
    # loadBalancerIP: 1.2.3.4
    # Optionally configure a JMX port
    # requires additional javaOpts, ie
    # javaOpts: >
    #   -Dcom.sun.management.jmxremote.port=4000
    #   -Dcom.sun.management.jmxremote.authenticate=false
    #   -Dcom.sun.management.jmxremote.ssl=false
    # jmxPort: 4000
    # Optionally configure other ports to expose in the master container
    extraPorts: []
    # - name: BuildInfoProxy
    #   port: 9000

    # List of plugins to be install during Jenkins master start
    installPlugins:
      - kubernetes:1.30.11
      - workflow-aggregator:2.6
      - workflow-job:1145.v7f2433caa07f
      - git:4.11.0
      - configuration-as-code:1414.v878271fc496f
      - credentials-binding:523.vd859a_4b_122e6
      - oic-auth:1.8
    # Set to false to download the minimum required version of all dependencies.
    installLatestPlugins: true

    # Set to true to download latest dependencies of any plugin that is requested to have the latest version.
    installLatestSpecifiedPlugins: false

    # List of plugins to install in addition to those listed in master.installPlugins
    additionalPlugins:
      - ace-editor:1.1
      - analysis-model-api:10.9.2
      - anchore-container-scanner:1.0.23
      - ansicolor:1.0.1
      - antisamy-markup-formatter:2.7
      - apache-httpcomponents-client-4-api:4.5.13-1.0
      - artifactory:3.15.4
      - authentication-tokens:1.4
      - badge:1.9.1
      - block-queued-job:0.2.0
      - blueocean:1.25.3
      - blueocean-autofavorite:1.2.5
      - blueocean-bitbucket-pipeline:1.25.3
      - blueocean-commons:1.25.3
      - blueocean-config:1.25.3
      - blueocean-core-js:1.25.3
      - blueocean-dashboard:1.25.3
      - blueocean-display-url:2.4.1
      - blueocean-events:1.25.3
      - blueocean-git-pipeline:1.25.3
      - blueocean-github-pipeline:1.25.3
      - blueocean-i18n:1.25.3
      - blueocean-jira:1.25.3
      - blueocean-jwt:1.25.3
      - blueocean-personalization:1.25.3
      - blueocean-pipeline-api-impl:1.25.3
      - blueocean-pipeline-editor:1.25.3
      - blueocean-pipeline-scm-api:1.25.3
      - blueocean-rest:1.25.3
      - blueocean-rest-impl:1.25.3
      - blueocean-web:1.25.3
      - bootstrap4-api:4.6.0-3
      - bouncycastle-api:2.25
      - branch-api:2.7.0
      - build-monitor-plugin:1.13+build.202203020040
      - cloudbees-bitbucket-branch-source:757.vddedc5f2589a_
      - cloudbees-folder:6.17
      - code-coverage-api:2.0.4
      - command-launcher:1.6
      - credentials:1087.1089.v2f1b_9a_b_040e4
      - dashboard-view:2.432.va_712ce35862d
      - data-tables-api:1.11.4-1
      - dependency-track:4.1.1
      - display-url-api:2.3.5
      - docker-commons:1.19
      - docker-workflow:1.24
      - durable-task:1.37
      - echarts-api:5.3.0-2
      - external-monitor-job:191.v363d0d1efdf8
      - favorite:2.4.1
      - font-awesome-api:6.0.0-1
      - forensics-api:1.8.0
      - git-client:3.11.0
      - git-server:1.10
      - github:1.34.3
      - github-api:1.122
      - github-branch-source:2.10.2
      - github-pullrequest:0.2.8
      - greenballs:1.15.1
      - handlebars:1.1.1
      - handy-uri-templates-2-api:2.1.8-1.0
      - htmlpublisher:1.25
      - icon-shim:3.0.0
      - ignore-committer-strategy:1.0.4
      - jackson2-api:2.13.2.20220328-273.v11d70a_b_a_1a_52
      - jacoco:3.3.0
      - javadoc:1.6
      - jdk-tool:1.4
      - jenkins-design-language:1.25.3
      - jira:3.7.1
      - job-dsl:1.79
      - jquery-detached:1.2.1
      - jquery3-api:3.6.0-2
      - jsch:0.1.55.2
      - junit:1.53
      - kubernetes-client-api:5.4.1
      - kubernetes-credentials:0.9.0
      - kubernetes-credentials-provider:0.20
      - ldap:1.26
      - lockable-resources:2.10
      - mailer:408.vd726a_1130320
      - matrix-auth:2.6.8
      - matrix-project:758.v7a_ea_491852f3
      - maven-plugin:3.8
      - mercurial:2.15
      - momentjs:1.1.1
      - okhttp-api:4.9.3-105.vb96869f8ac3a
      - Office-365-Connector:4.13.2
      - opentelemetry:2.5.1
      - pam-auth:1.6
      - pipeline-build-step:2.17
      - pipeline-github-lib:36.v4c01db_ca_ed16
      - pipeline-graph-analysis:1.11
      - pipeline-input-step:2.12
      - pipeline-milestone-step:1.3.2
      - pipeline-model-api:1.9.3
      - pipeline-model-definition:1.9.3
      - pipeline-model-extensions:1.9.3
      - pipeline-rest-api:2.17
      - pipeline-stage-step:291.vf0a8a7aeeb50
      - pipeline-stage-tags-metadata:1.9.3
      - pipeline-stage-view:2.17
      - plain-credentials:1.8
      - plugin-util-api:2.14.0
      - pipeline-utility-steps:2.3.0
      - popper-api:1.16.1-2
      - pubsub-light:1.16
      - scm-api:602.v6a_81757a_31d2
      - script-security:1131.v8b_b_5eda_c328e
      - simple-theme-plugin:0.6
      - slack:2.43
      - snakeyaml-api:1.29.1
      - sonar:2.14
      - sonar-quality-gates:1.3.1
      - sse-gateway:1.24
      - ssh-credentials:1.19
      - structs:308.v852b473a2b8c
      - theme-manager:0.5
      - timestamper:1.11.7
      - token-macro:267.vcdaea6462991
      - trilead-api:1.0.13
      - variant:1.4
      - warnings-ng:9.11.1
      - windows-slaves:1.8
      - workflow-api:1122.v7a_916f363c86
      - workflow-basic-steps:2.24
      - workflow-cps:2660.vb_c0412dc4e6d
      - workflow-cps-global-lib:544.vff04fa68714d
      - workflow-cps-global-lib-http:2.0.0
      - workflow-durable-task-step:2.40
      - workflow-multibranch:711.vdfef37cda_816
      - workflow-scm-step:2.13
      - workflow-step-api:622.vb_8e7c15b_c95a_
      - workflow-support:813.vb_d7c3d2984a_0
      - ws-cleanup:0.39
      - zapper:1.0.7

    # Enable to initialize the Jenkins master only once on initial installation.
    # Without this, whenever the master gets restarted (Evicted, etc.) it will fetch plugin updates which has the potential to cause breakage.
    # Note that for this to work, `persistence.enabled` needs to be set to `true`
    initializeOnce: false

    # Enable to always override the installed plugins with the values of 'master.installPlugins' on upgrade or redeployment.
    # overwritePlugins: true

    # Configures if plugins bundled with `master.image` should be overwritten with the values of 'master.installPlugins' on upgrade or redeployment.
    overwritePluginsFromImage: true

    # Enable HTML parsing using OWASP Markup Formatter Plugin (antisamy-markup-formatter), useful with ghprb plugin.
    # The plugin is not installed by default, please update master.installPlugins.
    enableRawHtmlMarkupFormatter: true
    # Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval
    scriptApproval:
      - "staticMethod java.lang.System getenv"
      - "method java.lang.String concat java.lang.String"
      - "new java.io.FileOutputStream java.lang.String"
      - "new java.lang.Exception"
      - "method groovy.text.Template make java.util.Map"
      - "method groovy.xml.MarkupBuilder setDoubleQuotes boolean"
      - "new groovy.json.JsonSlurperClassic"
      - "new java.io.File java.lang.String"
      - "method groovy.text.TemplateEngine createTemplate java.lang.String"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods write java.io.File java.lang.String"
      - "new groovy.text.SimpleTemplateEngine"
      - "new java.lang.Boolean boolean"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods getText java.io.File"
      - "staticMethod groovy.grape.Grape grab java.util.Map java.util.Map[]"
      - "staticField java.lang.System err"
      - "new java.util.HashMap java.util.Map"
      - "method groovy.lang.GroovyObject getProperty java.lang.String"
      - "new groovy.xml.MarkupBuilder java.io.Writer"
      - "method groovy.xml.MarkupBuilder setExpandEmptyElements boolean"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods putAt java.lang.Object java.lang.String java.lang.Object"
      - "new groovy.json.JsonBuilder java.lang.Object"
      - "staticMethod groovy.grape.Grape addResolver java.util.Map"
      - "staticMethod java.lang.System getProperty java.lang.String"
      - "new java.util.AbstractMap$SimpleImmutableEntry java.lang.Object java.lang.Object"
      - "method java.util.Calendar getTime"
      - "staticMethod org.codehaus.groovy.runtime.DefaultGroovyMethods execute java.lang.String"
      - "method groovy.xml.MarkupBuilder setOmitNullAttributes boolean"
      - "method java.lang.Throwable printStackTrace"
      - "method org.yaml.snakeyaml.Yaml load java.lang.String"
      - "new java.lang.StringBuffer"
      - "new org.yaml.snakeyaml.Yaml"
      - "method groovy.json.JsonBuilder toPrettyString"
      - "method groovy.xml.MarkupBuilder setOmitEmptyAttributes boolean"
      - "method groovy.lang.GroovyObject invokeMethod java.lang.String java.lang.Object"
      - "staticMethod org.codehaus.groovy.runtime.ProcessGroovyMethods waitForProcessOutput"  
    #  - "method groovy.json.JsonSlurperClassic parseText java.lang.String"
    #  - "new groovy.json.JsonSlurperClassic"
    # List of groovy init scripts to be executed during Jenkins master start
    initScripts: []
    #   - |
    #     #!groovy

    #     import hudson.model.*
    #     import jenkins.model.*
    #     import hudson.slaves.*
    #     import javaposse.jobdsl.plugin.*
    #     import hudson.plugins.git.*
    #     import java.util.Collections
    #     import java.util.List
    #     import hudson.triggers.TimerTrigger
    #     import java.util.logging.Logger
    #     import org.jenkinsci.plugins.simpletheme.ThemeElement
    #     import org.jenkinsci.plugins.simpletheme.CssTextThemeElement
    #     import org.jenkinsci.plugins.simpletheme.CssUrlThemeElement

    #     Logger.global.info("[init.d] security setup")

    #     def instance = Jenkins.getInstance()


    #     Logger.global.info("[init.d] Seeding ...")


    #     def jobName = 'seed-job'
    #     def project = new FreeStyleProject(instance, jobName)

    #     // Configure the SCM
    #     // -----------------

    #     def projectURL = "https://github.com/polarpoint-io/devops-groovy-jenkins-pipelines.git"
    #     // We are using a predefined user id (srv-jenkins). You can change it in the global config.
    #     List<UserRemoteConfig> user = Collections.singletonList(new UserRemoteConfig(projectURL, '', '', 'github-ssh-access'))
    #     List<BranchSpec> branches = Collections.singletonList(new BranchSpec("refs/heads/main"))
    #     List<SubmoduleConfig> submodules = Collections.<SubmoduleConfig>emptyList();
    #     def scm = new GitSCM(user, branches, false, submodules, null, null, null)
    #     project.setScm(scm)

    #     // Configure the Job DSL step
    #     // -----------------

    #     def jobDslBuildStep = new ExecuteDslScripts()
    #     jobDslBuildStep.with {
    #       additionalClasspath = "src/main/groovy"
    #       ignoreExisting = false
    #       lookupStrategy = LookupStrategy.JENKINS_ROOT
    #       removedJobAction = RemovedJobAction.IGNORE
    #       removedViewAction = RemovedViewAction.IGNORE
    #       scriptText = ""
    #       targets = "**/*.groovy"
    #     }
    #     project.getBuildersList().add(jobDslBuildStep)

    #     project.addTrigger(new TimerTrigger("@midnight"))
    #     project.save()
    #     // project.scheduleBuild()
    #     Logger.global.info("[init.d] Seeding done")
    #     Jenkins.instance.reload()

    #     Logger.global.info("[init.d] Theme setting started")
    #     Jenkins jenkins = Jenkins.getInstance()

    #     def decorator = Jenkins.instance.getDescriptorByType(org.codefirst.SimpleThemeDecorator.class)

    #     List<ThemeElement> configElements = new ArrayList<>();
    #     configElements.add(new CssTextThemeElement("DEFAULT"));
    #     configElements.add(new CssUrlThemeElement("https://tobix.github.io/jenkins-neo2-theme/dist/neo-light.css"));
    #     decorator.setElements(configElements);
    #     decorator.save();

    #     jenkins.save()   
    #     Logger.global.info("[init.d] Theme setting done")

    #  - |
    #    print 'adding global pipeline libraries, register properties, bootstrap jobs...'
    # Kubernetes secret that contains a 'credentials.xml' for Jenkins
    # credentialsXmlSecret: jenkins-credentials
    # Kubernetes secret that contains files to be put in the Jenkins 'secrets' directory,
    # useful to manage encryption keys used for credentials.xml for instance (such as
    # master.key and hudson.util.Secret)
    # secretsFilesSecret: jenkins-secrets
    # Jenkins XML job configs to provision
    additionalExistingSecrets: []
    #  - name: secret-name-1
    #    keyName: username
    #  - name: secret-name-1
    #    keyName: password

    additionalSecrets: []
    #  - name: nameOfSecret
    #    value: secretText

    # Generate SecretClaim resources in order to create Kubernetes secrets from HashiCorp Vault using kube-vault-controller.
    # 'name' is name of the secret that will be created in Kubernetes. The Jenkins fullname is prepended to this value.
    # 'path' is the fully qualified path to the secret in Vault
    # 'type' is an optional Kubernetes secret type. Defaults to 'Opaque'
    # 'renew' is an optional secret renewal time in seconds
    secretClaims: []
    # - name: secretName        # required
    #   path: testPath          # required
    #   type: kubernetes.io/tls # optional
    #   renew: 60               # optional

    # Name of default cloud configuration.
    cloudName: "kubernetes"
    jobs: {}
    #  test: |-
    #    <<xml here>>

    # Below is the implementation of Jenkins Configuration as Code.  Add a key under configScripts for each configuration area,
    # where each corresponds to a plugin or section of the UI.  Each key (prior to | character) is just a label, and can be any value.
    # Keys are only used to give the section a meaningful name.  The only restriction is they may only contain RFC 1123 \ DNS label
    # characters: lowercase letters, numbers, and hyphens.  The keys become the name of a configuration yaml file on the master in
    # /var/jenkins_home/casc_configs (by default) and will be processed by the Configuration as Code Plugin.  The lines after each |
    # become the content of the configuration yaml file.  The first line after this is a JCasC root element, eg jenkins, credentials,
    # etc.  Best reference is https://<jenkins_url>/configuration-as-code/reference.  The example below creates a welcome message:
    JCasC:
      enabled: true
      defaultConfig: true
      configScripts:
        security: |
          jenkins:
            systemMessage: Post Office Continuous Integration. Please see <a href=\"https://pol-jira.atlassian.net/wiki/spaces/DO/pages/14450801/Jenkins+with+JCasC\">Jenkins JCasC</a> for more details.
          jobs:
            - script: |
                freeStyleJob('seed-job') {
                  scm {
                    git {
                        id = 'seed-job'
                        remote {
                          url = 'git@github.com:polarpoint-io/devops-groovy-jenkins-pipelines.git'
                          credentials = "github-ssh-access"
                          }
                        
                    }                  
                  }
                  steps {
                    dsl {
                      external('**/*.groovy')  
                      removeAction('IGNORE')      
                    }
                  }
                      triggers {
                          cron('@midnight')
                        }
                }                           
          unclassified:
            githubpluginconfig:
              configs:
                - name: "GitHub"
                  apiUrl: "https://github.com/api/v3"
                  clientCacheSize: 50
                  credentialsId: "github-personal-access-token"
            gitscm:
              globalConfigName: jenkins
              globalConfigEmail: jenkins@domain.local
              createAccountBasedOnEmail: true
            globalLibraries:
                  libraries:
                    - name: "pipeline-library"
                      defaultVersion: "master"
                      retriever:
                        modernSCM:
                          scm:
                            git:
                              remote: git@github.com:polarpoint-io/devops-groovy-jenkins-shared-library.git
                              credentialsId: "github-ssh-access"
                              traits:
                              - "gitBranchDiscovery"
            globalSettings:
            simple-theme-plugin:
              elements:
              - cssUrl:
                  url: "https://tobix.github.io/jenkins-neo2-theme/dist/neo-light.css"                                                        
            sonarGlobalConfiguration:
              buildWrapperEnabled: true
              installations:
                - name: "sonarQubeDev"
                  serverUrl: "http://sonarqube-sonarqube.continuous-integration.svc.cluster.local:9000"
                  credentialsId: "sonarqube-api-token"  
      #  welcome-message: |
      #    jenkins:
      #      systemMessage: Welcome to our CI\CD server.  This Jenkins is configured and managed 'as code'.
      # Ignored if securityRealm is defined in master.JCasC.configScripts and
      # ignored if master.enableXmlConfig=true as master.securityRealm takes precedence
      #  legacy
      # Ignored if authorizationStrategy is defined in master.JCasC.configScripts and
      # ignored if master.enableXmlConfig=true as master.authorizationStrategy takes precedence
      authorizationStrategy: |-
          globalMatrix:
            permissions:
            - "Credentials/View:AWS-SSO-Jenkins-User"
            - "Job/Build:AWS-SSO-Jenkins-User"
            - "Job/Cancel:AWS-SSO-Jenkins-User"
            - "Job/Configure:AWS-SSO-Jenkins-User"
            - "Job/Create:AWS-SSO-Jenkins-User"
            - "Job/Delete:AWS-SSO-Jenkins-User"
            - "Job/Move:AWS-SSO-Jenkins-User"
            - "Job/Read:AWS-SSO-Jenkins-User"
            - "Job/Workspace:AWS-SSO-Jenkins-User"
            - "Lockable Resources/View:AWS-SSO-Jenkins-User"
            - "Overall/Administer:AWS-SSO-Admin-Users"
            - "Overall/Read:authenticated"
            - "Run/Delete:AWS-SSO-Jenkins-User"
            - "Run/Replay:AWS-SSO-Jenkins-User"
            - "Run/Update:AWS-SSO-Jenkins-User"
            - "SCM/Tag:AWS-SSO-Jenkins-User"
            - "View/Configure:AWS-SSO-Jenkins-User"
            - "View/Create:AWS-SSO-Jenkins-User"
            - "View/Delete:AWS-SSO-Jenkins-User"
            - "View/Read:AWS-SSO-Jenkins-User"
    #    loggedInUsersCanDoAnything:
    #      allowAnonymousRead: false
    # Optionally specify additional init-containers
    customInitContainers: []
    # - name: custom-init
    #   image: "alpine:3.7"
    #   imagePullPolicy: Always
    #   command: [ "uname", "-a" ]

    sidecars:
      configAutoReload:
        # If enabled: true, Jenkins Configuration as Code will be reloaded on-the-fly without a reboot.  If false or not-specified,
        # jcasc changes will cause a reboot and will only be applied at the subsequent start-up.  Auto-reload uses the
        # http://<jenkins_url>/reload-configuration-as-code endpoint to reapply config when changes to the configScripts are detected.
        enabled: false
        image: kiwigrid/k8s-sidecar:1.14.2
        imagePullPolicy: IfNotPresent
        resources: {}
          #   limits:
          #     cpu: 100m
          #     memory: 100Mi
          #   requests:
          #     cpu: 50m
          #     memory: 50Mi
        # How many connection-related errors to retry on
        reqRetryConnect: 10
        # env:
        #   - name: REQ_TIMEOUT
        #     value: "30"
        # SSH port value can be set to any unused TCP port.  The default, 1044, is a non-standard SSH port that has been chosen at random.
        # Is only used to reload jcasc config from the sidecar container running in the Jenkins master pod.
        # This TCP port will not be open in the pod (unless you specifically configure this), so Jenkins will not be
        # accessible via SSH from outside of the pod.  Note if you use non-root pod privileges (runAsUser & fsGroup),
        # this must be > 1024:
        sshTcpPort: 1044
        # folder in the pod that should hold the collected dashboards:
        folder: "/var/jenkins_home/casc_configs"
        # If specified, the sidecar will search for JCasC config-maps inside this namespace.
        # Otherwise the namespace in which the sidecar is running will be used.
        # It's also possible to specify ALL to search in all namespaces:
        # searchNamespace:

      # Allows you to inject additional/other sidecars
      other: []
      ## The example below runs the client for https://smee.io as sidecar container next to Jenkins,
      ## that allows to trigger build behind a secure firewall.
      ## https://jenkins.io/blog/2019/01/07/webhook-firewalls/#triggering-builds-with-webhooks-behind-a-secure-firewall
      ##
      ## Note: To use it you should go to https://smee.io/new and update the url to the generete one.
      # - name: smee
      #   image: docker.io/twalter/smee-client:1.0.2
      #   args: ["--port", "{{ .Values.master.servicePort }}", "--path", "/github-webhook/", "--url", "https://smee.io/new"]
      #   resources:
      #     limits:
      #       cpu: 50m
      #       memory: 128Mi
      #     requests:
      #       cpu: 10m
      #       memory: 32Mi
    # Name of the Kubernetes scheduler to use
    schedulerName: ""
    # Node labels and tolerations for pod assignment
    # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
    nodeSelector: {}

    terminationGracePeriodSeconds:

    terminationMessagePath:
    terminationMessagePolicy:

    tolerations: []
    affinity: {}
    # Leverage a priorityClass to ensure your pods survive resource shortages
    # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
    priorityClassName:
    podAnnotations: {}
    # Add deployment annotation
    deploymentAnnotations: {}

    statefulSetAnnotations: {}
    # StatefulSet updateStrategy
    # ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    updateStrategy: {}

    # The below two configuration-related values are deprecated and replaced by Jenkins Configuration as Code (see above
    # JCasC key).  They will be deleted in an upcoming version.
    customConfigMap: false
    # By default, the configMap is only used to set the initial config the first time
    # that the chart is installed.  Setting `overwriteConfig` to `true` will overwrite
    # the jenkins config with the contents of the configMap every time the pod starts.
    # This will also overwrite all init scripts
    overwriteConfig: false

    # By default, the Jobs Map is only used to set the initial jobs the first time
    # that the chart is installed.  Setting `overwriteJobs` to `true` will overwrite
    # the jenkins jobs configuration with the contents of Jobs every time the pod starts.
    overwriteJobs: false

    ingress:
      enabled: false
      # Override for the default paths that map requests to the backend
      paths: []
      # - backend:
      #     serviceName: ssl-redirect
      #     servicePort: use-annotation
      # - backend:
      #     serviceName: >-
      #       {{ template "jenkins.fullname" . }}
      #     # Don't use string here, use only integer value!
      #     servicePort: 8080
      # For Kubernetes v1.14+, use 'networking.k8s.io/v1beta1'
      apiVersion: "extensions/v1beta1"
      labels: {}
      annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # Set this path to jenkinsUriPrefix above or use annotations to rewrite path
      # path: "/jenkins"
      # configures the hostname e.g. jenkins.example.com
      hostName:
      tls:
      # - secretName: jenkins.cluster.local
      #   hosts:
      #     - jenkins.cluster.local

    # often you want to have your controller all locked down and private
    # but you still want to get webhooks from your SCM
    # A secondary ingress will let you expose different urls
    # with a differnt configuration
    secondaryingress:
      enabled: false
      # paths you want forwarded to the backend
      # ex /github-webhook
      paths: []
      # For Kubernetes v1.14+, use 'networking.k8s.io/v1beta1'
      apiVersion: "extensions/v1beta1"
      labels: {}
      annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # configures the hostname e.g. jenkins-external.example.com
      hostName:
      tls:
      # - secretName: jenkins-external.example.com
      #   hosts:
      #     - jenkins-external.example.com

    # If you're running on GKE and need to configure a backendconfig
    # to finish ingress setup, use the following values.
    # Docs: https://cloud.google.com/kubernetes-engine/docs/concepts/backendconfig
    backendconfig:
      enabled: false
      apiVersion: "extensions/v1beta1"
      name:
      labels: {}
      annotations: {}
      spec: {}

    # Openshift route
    route:
      enabled: false
      labels: {}
      annotations: {}
      # path: "/jenkins"

    additionalConfig: {}

    # master.hostAliases allows for adding entries to Pod /etc/hosts:
    # https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    hostAliases: []
    # - ip: 192.168.50.50
    #   hostnames:
    #     - something.local
    # - ip: 10.0.50.50
    #   hostnames:
    #     - other.local

    # Expose Prometheus metrics
    prometheus:
      # If enabled, add the prometheus plugin to the list of plugins to install
      # https://plugins.jenkins.io/prometheus
      enabled: true
      # Additional labels to add to the ServiceMonitor object
      serviceMonitorAdditionalLabels: {}
      # Set a custom namespace where to deploy ServiceMonitor resource
      # serviceMonitorNamespace: monitoring
      scrapeInterval: 60s
      # This is the default endpoint used by the prometheus plugin
      scrapeEndpoint: /prometheus
      # Additional labels to add to the PrometheusRule object
      alertingRulesAdditionalLabels: {}
      # An array of prometheus alerting rules
      # See here: https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/
      # The `groups` root object is added by default, simply add the rule entries
      alertingrules: []
      # Set a custom namespace where to deploy PrometheusRule resource
      prometheusRuleNamespace: ""

    # Can be used to disable rendering master test resources when using helm template
    testEnabled: true
    httpsKeyStore:
      jenkinsHttpsJksSecretName: ''
      enable: false
      httpPort: 8081
      path: "/var/jenkins_keystore"
      fileName: "keystore.jks"
      password: "password"
      # Convert keystore.jks files content to base64 ( cat keystore.jks | base64 ) and put the output here
      jenkinsKeyStoreBase64Encoded: |
          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

  agent:
    enabled: true
    defaultsProviderTemplate: ""
    # URL for connecting to the Jenkins contoller
    jenkinsUrl:
    # connect to the specified host and port, instead of connecting directly to the Jenkins controller
    jenkinsTunnel:
    kubernetesConnectTimeout: 5
    kubernetesReadTimeout: 15
    maxRequestsPerHostStr: "32"
    namespace:
    image: "jenkins/inbound-agent"
    tag: "4.11-1"
    workingDir: "/home/jenkins"
    nodeUsageMode: "NORMAL"
    customJenkinsLabels: []
    # name of the secret to be used for image pulling
    imagePullSecretName:
    componentName: "jenkins-agent"
    websocket: false
    privileged: false
    runAsUser:
    runAsGroup:
    resources:
      requests:
        cpu: "512m"
        memory: "512Mi"
      limits:
        cpu: "512m"
        memory: "512Mi"
    # You may want to change this to true while testing a new image
    alwaysPullImage: false
    # Controls how agent pods are retained after the Jenkins build completes
    # Possible values: Always, Never, OnFailure
    podRetention: "Never"
    # Disable if you do not want the Yaml the agent pod template to show up
    # in the job Console Output. This can be helpful for either security reasons
    # or simply to clean up the output to make it easier to read.
    showRawYaml: true
    # You can define the volumes that you want to mount for this container
    # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, PVC, Secret
    # Configure the attributes as they appear in the corresponding Java class for that type
    # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes
    volumes: []
    # - type: ConfigMap
    #   configMapName: myconfigmap
    #   mountPath: /var/myapp/myconfigmap
    # - type: EmptyDir
    #   mountPath: /var/myapp/myemptydir
    #   memory: false
    # - type: HostPath
    #   hostPath: /var/lib/containers
    #   mountPath: /var/myapp/myhostpath
    # - type: Nfs
    #   mountPath: /var/myapp/mynfs
    #   readOnly: false
    #   serverAddress: "192.0.2.0"
    #   serverPath: /var/lib/containers
    # - type: PVC
    #   claimName: mypvc
    #   mountPath: /var/myapp/mypvc
    #   readOnly: false
    # - type: Secret
    #   defaultMode: "600"
    #   mountPath: /var/myapp/mysecret
    #   secretName: mysecret
    # Pod-wide ennvironment, these vars are visible to any container in the agent pod

    # workspaceVolume: {}
    #workspaceVolume: {}
    envVars: []
    # - name: PATH
    #   value: /usr/local/bin
    nodeSelector: {}
    # Key Value selectors. Ex:
    # jenkins-agent: v1

    # Executed command when side container gets started
    command:
    args: "${computer.jnlpmac} ${computer.name}"
    # Side container name
    sideContainerName: "jnlp"
    # Doesn't allocate pseudo TTY by default
    TTYEnabled: false
    # Max number of spawned agent
    containerCap: 10
    # Pod name
    podName: "default"
    # Allows the Pod to remain active for reuse until the configured number of
    # minutes has passed since the last step was executed on it.
    idleMinutes: 0
    # Raw yaml template for the Pod. For example this allows usage of toleration for agent pods.
    # https://github.com/jenkinsci/kubernetes-plugin#using-yaml-to-define-pod-templates
    # https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    yamlTemplate: ""
    # yamlTemplate: |-
    #   apiVersion: v1
    #   kind: Pod
    #   spec:
    #     tolerations:
    #     - key: "key"
    #       operator: "Equal"
    #       value: "value"
    # Defines how the raw yaml field gets merged with yaml definitions from inherited pod templates: merge or override
    yamlMergeStrategy: "override"
    # Timeout in seconds for an agent to be online
    ConnectTimeout: 100
    # Annotations to apply to the pod.
    annotations: {}

    # Below is the implementation of custom pod templates for the default configured kubernetes cloud.
    # Add a key under podTemplates for each pod template. Each key (prior to | character) is just a label, and can be any value.
    # Keys are only used to give the pod template a meaningful name.  The only restriction is they may only contain RFC 1123 \ DNS label
    # characters: lowercase letters, numbers, and hyphens. Each pod template can contain multiple containers.
    # For this pod templates configuration to be loaded the following values must be set:
    # master.JCasC.enabled: true
    # master.JCasC.defaultConfig: true
    # Best reference is https://<jenkins_url>/configuration-as-code/reference#Cloud-kubernetes. The example below creates a python pod template.
    podTemplates:
      crane-0-7-0: |
        - name: crane-0-7-0
          label: crane-0-7-0
          serviceAccount: jenkins
          containers:
            - name: crane-0-7-0
              image: gcr.io/go-containerregistry/crane:debug
              command: "sleep"
              args: "99d"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "2024Mi"
          envVars:
            - envVar:
                key: "SSL_CERT_FILE"
                value: "/kaniko/ssl/certs/ca-certificates.crt"
          volumes:
          - secretVolume:
              mountPath: "/root/.docker/"
              optional: false
              secretName: "docker-registry-credentials"
          - configMapVolume:
              configMapName: "cm-docker-harbor-ca-cert"
              mountPath: "/kaniko/ssl/certs/"
              optional: false
      kaniko-1-7-0: |
        - name: kaniko-1-7-0
          label: kaniko-1-7-0
          serviceAccount: jenkins
          containers:
            - name: kaniko-1-7-0
              image: gcr.io/kaniko-project/executor:v1.7.0-debug
              command: "sleep"
              args: "99d"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "1"
              resourceRequestMemory: "1024Mi"
              resourceLimitCpu: "2"
              resourceLimitMemory: "2048Mi"
          volumes:
          - secretVolume:
              mountPath: "/kaniko/.docker/"
              optional: false
              secretName: "docker-registry-credentials"
          - configMapVolume:
              configMapName: "cm-docker-harbor-ca-cert"
              mountPath: "/etc/ssl/certs/ca-certificates.crt"
              subPath: "ca-certificates.crt"
              optional: false
      python-3-8: |
        - name: python-3-8
          label: python-3-8
          serviceAccount: jenkins
          containers:
            - name: python
              image: python:3
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "1024Mi"
      docker-19-03-12: |
        - name: docker-19-03-12
          label: "docker-19-03-12"
          name: "docker-19-03-12"
          yaml: |-
            apiVersion: v1
            kind: Pod
            spec:
              volumes:
              - name: docker-socket
                emptyDir: {}
              - name: docker-harbor-ca-cert
                configMap:
                  name: cm-docker-harbor-ca-cert
              containers:
              - name: docker-19-03-12
                image: docker:19.03.12
                command:
                - sleep
                args:
                - 99d
                volumeMounts:
                - name: docker-socket
                  mountPath: /var/run
                - name: docker-harbor-ca-cert
                  mountPath: /etc/docker/certs.d/image.polarpoint.io
              - name: docker-daemon
                image: docker:19.03.1-dind
                securityContext:
                  privileged: true
                volumeMounts:
                - name: docker-socket
                  mountPath: /var/run
                - name: docker-harbor-ca-cert
                  mountPath: /etc/docker/certs.d/image.polarpoint.io
      versioner: |
        - name: versioner
          label: versioner
          containers:
            - name: maven-git-client
              image: image.polarpoint.io/image/maven-git-client:0.1.0-FINAL
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "1024Mi"
            - name: node-16
              image: image.polarpoint.io/image/node-16:0.1.0-FINAL
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "500m"
              resourceRequestMemory: "1024Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "2024Mi"               
          imagePullSecrets:
            - name: docker-registry-credentials  
      mongoclient-2-2-0: |
        - name: mongoclient-2-2-0
          label: mongoclient-2-2-0
          containers:
            - name: mongoclient-2-2-0
              image: mongoclient/mongoclient:2.2.0
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "1024Mi"          
      gradle-4-8-1: |
        - name: gradle-4-8-1
          label: gradle-4-8-1
          containers:
            - name: gradle-4-8-1
              image: gradle:4.8.1-jdk
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "2048Mi"
      gradle-4-9-0: |
        - name: gradle-4-9-0
          label: gradle-4-9-0
          containers:
            - name: gradle-4-9-0
              image: gradle:4.9-jdk8
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "2048Mi"                     
      gradle-6-2-2: |
        - name: gradle-6-2-2
          label: gradle-6-2-2
          containers:
            - name: gradle-6-2-2
              image: amd64/gradle:6.2.2-jdk11
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "2048Mi"    
      gradle-6-0-1: |
        - name: gradle-6-0-1
          label: gradle-6-0-1
          containers:
            - name: gradle-6-0-1
              image: amd64/gradle:6.2.2-jdk11
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "2048Mi"   
      liquibase-3-10: |
        - name: liquibase-3-10
          label: liquibase-3-10
          containers:
            - name: liquibase-3-10
              image: liquibase/liquibase:3.10.x
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "1024Mi"
      chg-log-0-1-0: |
        - name: chg-log-0-1-0
          label: chg-log-0-1-0
          containers:
            - name: chg-log-0-1-0
              image: polarpoint/chg-log:0.1.0 
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "1024Mi"               
      ansible: |
        - name: ansible
          label: ansible
          containers:
            - name: ansible
              image: ansible/ansible:ubuntu1604py3
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "1024Mi"
      helm-3-6-0: |
        - name: helm-3-6-0
          label: helm-3-6-0
          containers:
            - name: helm-3-6-0
              image: image.polarpoint.io/image/helm-client:3.6.0-FINAL
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "2048Mi"
          imagePullSecrets:
            - name: docker-registry-credentials
      go-lang-1-15-6: |
        - name: go-lang-1-15-6
          label: go-lang-1-15-6
          containers:
            - name: go-lang-1-15-6
              image: image.polarpoint.io/image/go-lang:1.17.2-FINAL
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "500m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "1024Mi"
          imagePullSecrets:
            - name: docker-registry-credentials
      jmeter-5-4-0: |
        - name: jmeter-5-4-0
          label: jmeter-5-4-0
          containers:
            - name: jmeter-5-4-0
              image: image.polarpoint.io/image/jmeter:0.1.0-FINAL 
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
          imagePullSecrets:
            - name: docker-registry-credentials
      phantomjs-2-1-1: |
        - name: phantomjs-2-1-1
          label: phantomjs-2-1-1
          containers:
            - name: phantomjs-2-1-1
              image: wernight/phantomjs:2.1.1
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "100m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "1024Mi"               
          imagePullSecrets:
            - name: docker-registry-credentials
      aws-cli-2-1-19: |
        - name: aws-cli-2-1-19
          label: aws-cli-2-1-19
          containers:
            - name: aws-cli-2-1-19
              image: amazon/aws-cli:2.1.19
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "100m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "1024Mi"               
          imagePullSecrets:
            - name: docker-registry-credentials
      packer-1-7: |
        - name: packer-1-7
          label: packer-1-7
          containers:
            - name: packer-1-7
              image: image.polarpoint.io/image/packer-client:1.8.0-FINAL
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "500m"
              resourceRequestMemory: "1024Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "2024Mi"               
          imagePullSecrets:
            - name: docker-registry-credentials            
      maven-git-client: |
        - name: maven-git-client
          label: maven-git-client
          containers:
            - name: maven-git-client
              image: image.polarpoint.io/image/maven-git-client:0.1.0-FINAL
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "1024Mi"
          imagePullSecrets:
            - name: docker-registry-credentials 
      node-16: |
        - name: node-16
          label: node-16
          containers:
            - name: node-16
              image: image.polarpoint.io/image/node-16:0.1.0-FINAL
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "500m"
              resourceRequestMemory: "1024Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "2024Mi"               
          imagePullSecrets:
            - name: docker-registry-credentials            
      maven-3-8: |
        - name: maven-3-8
          label: maven-3-8
          containers:
            - name: maven-3-8
              image: maven:3.8.4-jdk-11-slim
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "1024Mi"
      maven-3-6: |
        - name: maven-3-6
          label: maven-3-6
          containers:
            - name: maven-3-6
              image: maven:3.6.0-jdk-11-slim
              command: "/bin/sh -c"
              args: "cat"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "400m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1"
              resourceLimitMemory: "1024Mi"

  # Here you can add additional agents
  # They inherit all values from `agent` so you only need to specify values which differ
  additionalAgents: {}
  #  maven:
  #    podName: maven
  #    customJenkinsLabels: maven
  #    # An example of overriding the jnlp container
  #    # sideContainerName: jnlp
  #    image: jenkins/jnlp-agent-maven
  #    tag: latest
  #  python:
  #    podName: python
  #    customJenkinsLabels: python
  #    sideContainerName: python
  #    image: python
  #    tag: "3"
  #    command: "/bin/sh -c"
  #    args: "cat"
  #    TTYEnabled: true

  persistence:
    enabled: true
    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    existingClaim:
    ## jenkins data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass:
    annotations: {}
    labels: {}
    accessMode: "ReadWriteOnce"
    size: "100Gi"
    volumes:
    #  - name: nothing
    #    emptyDir: {}
    mounts:
    #  - mountPath: /var/nothing
    #    name: nothing
    #    readOnly: true

  networkPolicy:
    # Enable creation of NetworkPolicy resources.
    enabled: false
    # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'
    # For Kubernetes v1.7, use 'networking.k8s.io/v1'
    apiVersion: networking.k8s.io/v1
    # You can allow agents to connect from both within the cluster (from within specific/all namespaces) AND/OR from a given external IP range
    internalAgents:
      allowed: true
      podLabels: {}
      namespaceLabels: {}
        # project: myproject
    externalAgents: {}
    #   ipCIDR: 172.17.0.0/16
    #   except:
    #     - 172.17.1.0/24

  ## Install Default RBAC roles and bindings
  rbac:
    create: true
    readSecrets: true

  serviceAccount:
    create: true
    # The name of the service account is autogenerated by default
    name:
    annotations: {}
    imagePullSecretName:

  serviceAccountAgent:
    # Specifies whether a ServiceAccount should be created
    create: false
    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name:
    annotations: {}
    imagePullSecretName:


  ## Backup cronjob configuration
  ## Ref: https://github.com/maorfr/kube-tasks
  backup:
    # Backup must use RBAC
    # So by enabling backup you are enabling RBAC specific for backup
    enabled: false
    # Used for label app.kubernetes.io/component
    componentName: "backup"
    # Schedule to run jobs. Must be in cron time format
    # Ref: https://crontab.guru/
    schedule: "0 2 * * *"
    labels: {}
    serviceAccount:
      create: true
      name:
      annotations: {}
      # Example for authorization to AWS S3 using kube2iam or IRSA
      # Can also be done using environment variables
      # iam.amazonaws.com/role: "jenkins"
      # "eks.amazonaws.com/role-arn": "arn:aws:iam::123456789012:role/jenkins-backup"
    # Set this to terminate the job that is running/failing continously and set the job status to "Failed"
    activeDeadlineSeconds: ""
    image:
      repository: "maorfr/kube-tasks"
      tag: "0.2.0"
    # Additional arguments for kube-tasks
    # Ref: https://github.com/maorfr/kube-tasks#simple-backup
    extraArgs: []
    # Add existingSecret for AWS credentials
    existingSecret: {}
    ## Example for using an existing secret
    # jenkinsaws:
    ## Use this key for AWS access key ID
      # awsaccesskey: jenkins_aws_access_key
    ## Use this key for AWS secret access key
      # awssecretkey: jenkins_aws_secret_key
    # Add additional environment variables
    # jenkinsgcp:
    ## Use this key for GCP credentials
      # gcpcredentials: credentials.json
    env: []
    # Example environment variable required for AWS credentials chain
    # - name: "AWS_REGION"
    #   value: "us-east-1"
    resources:
      requests:
        memory: 1Gi
        cpu: 1
      limits:
        memory: 1Gi
        cpu: 1
    # Destination to store the backup artifacts
    # Supported cloud storage services: AWS S3, Minio S3, Azure Blob Storage, Google Cloud Storage
    # Additional support can added. Visit this repository for details
    # Ref: https://github.com/maorfr/skbn
    destination: "s3://jenkins-data/backup"
    # Enable backup pod security context (must be `true` if runAsUser or fsGroup are set)
    usePodSecurityContext: true
    # When setting runAsUser to a different value than 0 also set fsGroup to the same value:
    runAsUser: 1000
    fsGroup: 1000
    securityContextCapabilities: {}
    #  drop:
    #    - NET_RAW
  checkDeprecation: true
  awsSecurityGroupPolicies:
    enabled: false
    policies:
      - name: ""
        securityGroupIds: []
        podSelector: {}